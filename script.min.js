const PREVIEW = $("#textShadowPreview")
const LETTER_SPACING = $("#letter-spacing")
const LETTER_SPACING_UNIT = $("#letter-spacing-unit")
const LETTER_SPACING_SLIDER = $("#letter-spacing-slider")
const WORD_SPACING = $("#word-spacing")
const WORD_SPACING_UNIT = $("#word-spacing-unit")
const WORD_SPACING_SLIDER = $("#word-spacing-slider")

function TEXTSHADOWCSS(options) {
    this.color = options["color"] || tinycolor("white")
    this.backgroundColor = options["backgroundColor"] || tinycolor("black")
    this.fontSize = options["fontSize"] || 100
    this.fontSizeUnit = options["fontSizeUnit"] || "px"
    this.fontFamily = options["fontFamily"] || "sans-serif"
    this.letterSpacing = options["letterSpacing"] || "normal"
    this.letterSpacingUnit = options["letterSpacingUnit"] || "px"
    this.wordSpacing = options["wordSpacing"] || "normal"
    this.wordSpacingUnit = options["wordSpacingUnit"] || "px"
    this.props = options["textShadow"]
    this.order = ["0"]
    this.fontWeight = options["fontWeight"] || 400
    this.textDecoration = options["textDecoration"] || "none"
    this.fontStyle = options["fontStyle"] || "normal"
    this.fontVariant = options["fontVariant"] || "normal"
    this.textTransform = options["textTransform"] || "none"
    this.format = "rgba"
}
//change

function _updateTextShadowPreview() {
    const { color, backgroundColor, fontSize, fontSizeUnit, fontFamily, letterSpacing, letterSpacingUnit, wordSpacing, wordSpacingUnit, fontWeight, textDecoration, fontStyle, fontVariant, textTransform } = textshadow
    const textShadow = _getTextShadowCSS()

    //console.log(letterSpacing)
    //console.log(letterSpacingUnit)

    //console.log(fontFamily)
    PREVIEW.css("text-shadow", textShadow)
    PREVIEW.css("color", color.toRgbString())
    PREVIEW.css("background-color", backgroundColor.toRgbString())
    PREVIEW.css("font-family", fontFamily)
    PREVIEW.css("font-size", fontSize + fontSizeUnit)
    PREVIEW.css("letter-spacing", letterSpacing + letterSpacingUnit)
    PREVIEW.css("word-spacing", wordSpacing + wordSpacingUnit)
    PREVIEW.css("font-weight", fontWeight)
    PREVIEW.css("text-decoration", textDecoration)
    PREVIEW.css("font-style", fontStyle)
    PREVIEW.css("font-variant", fontVariant)
    PREVIEW.css("text-transform", textTransform)

    let html = ""

    html += "<div><b>font-family: </b>" + fontFamily + ";</div>"
    html += "<div><b>font-size: </b>" + fontSize + fontSizeUnit + ";</div>"

    if (letterSpacing !== "normal") {
        html += "<div><b>letter-spacing: </b>" + letterSpacing + letterSpacingUnit + ";</div>"
    }

    if (wordSpacing !== "normal") {
        html += "<div><b>word-spacing: </b>" + wordSpacing + wordSpacingUnit + ";</div>"
    }

    if (fontWeight !== "normal") {
        html += "<div><b>font-weight: </b>" + fontWeight + ";</div>"
    }

    if (textDecoration !== "none") {
        html += "<div><b>text-decoration: </b>" + textDecoration + ";</div>"
    }

    if (fontVariant !== "normal") {
        html += "<div><b>font-variant: </b>" + fontVariant + ";</div>"
    }

    if (textTransform !== "none") {
        html += "<div><b>text-transform: </b>" + textTransform + ";</div>"
    }

    html += "<div><b>color: </b>" + color + ";</div>"
    html += "<div><b>background-color: </b>" + backgroundColor + ";</div>"
    html += "<div><b>text-shadow: </b>" + textShadow + ";</div>"


    let fontName = fontFamily.replace(/\s+/g, "+")
    //console.log(fontName)

    let link = '<div>&ltlink rel="preconnect" href="https://fonts.googleapis.com"&gt</div><div>&ltlink rel="preconnect" href="https://fonts.gstatic.com" crossorigin&gt</div><div>&ltlink href="https://fonts.googleapis.com/css2?family=' + fontName + '&display=swap" rel="stylesheet"&gt</div>'

    //console.log(link)

    $("#font-link").html(link)

    $("#show-code").html(html)
}

function _getTextShadowCSS() {
    ////console.log(textshadow.props)

    var textShadow = ""
    var f = textshadow.format
    var p = textshadow.props
    var o = textshadow.order
    var l = o.length
    var prop

    ////console.log(f)

    for (var i = 0; i < l; i++) {
        ////console.log(p[o[i]])
        prop = p[o[i]]

        if (!prop.visible) {
            continue
        }
        ////console.log(f)
        let color
        if (f === "rgba") {
            color = prop.color.toRgbString()
        } else if (f === "hsla") {
            color = prop.color.toHslString()
        } else if (f === "hex") {
            color = prop.color.toHexString()
        }
        //console.log(color)
        const css = prop.offsetX + prop.offsetXUnit + " " + prop.offsetY + prop.offsetYUnit + " " + prop.blurRadius + prop.blurRadiusUnit + " " + color
        textShadow += ", " + css
    }

    textShadow = textShadow.substring(2)
        ////console.log(textShadow)

    if (CSS.supports("text-shadow", textShadow)) {
        ////console.log("ok")
    }

    return textShadow
}

function _parseCSSInput(value, start) {
    //console.log(value)
    value = value.replace(/\s+/g, "")
    value = value.replace("text-shadow:", "")
    value = value.replace(";", "")
    //console.log(value)

    let results = [...value.matchAll(/(#(?:[\da-fA-F]{3}){1,2}|(?:rgb|hsl)a\((?:\d{1,3}%?,\s?){3}(?:1|0?\.\d+)\)|(?:rgb|hsl)\(\d{1,3}%?(?:,\s?\d{1,3}%?){2}\))(((-?\d{1,3})(px|em))((-?\d{1,3})(px|em))((-?\d{1,3})(px|em))?)/g)]
    //console.log(results)
    const array = []

    for (var i = 0; i < results.length; i++) {
        start = start + 1 //expect error to be occured in cssgradienteditor//not solved

        const res = {}
        const result = results[i]
        const elem = $("<li class='shadow' id='" + start + "'></li>")

        res.color = tinycolor(result[1])
        res.offsetX = parseFloat(result[4])
        res.offsetXUnit = result[5]
        res.offsetY = parseFloat(result[7])
        res.offsetYUnit = result[8]
        res.blurRadius = parseFloat(result[10])
        res.blurRadiusUnit = result[11]
        res.visible = true
        array.push(res)
        createElem(start, res.offsetX, res.offsetXUnit, res.offsetY, res.offsetYUnit, res.blurRadius, res.blurRadiusUnit, res.color, elem)
        $(".shadows__container").append(elem)
        //console.log(elem)
    }
    return array
}

function createUnit(unit, type, id, container) {
    const elem1 = $("<div class='bg-selected'>" + unit + "</div>")
    const elem0 = $("<div style='display: inline-block'></div>")
    const values = ["px", "em", "rem", "vw", "vh"]
    const options = $("<div class='shadow-options' data-id='" + id + "' data-type='" + type + "'></div>")

    values.map(function(value) {
        option = $("<div class='shadow-option' data-value='" + value + "'><span>" + value + "</span></div>")
        options.append(option)

        option.click(function() {
            const value = $(this).data("value")
            const id = $(this).parent().data("id")
            const property = $(this).parent().data("type")
            //console.log(value)
            textshadow.props[id][property] = value
            _updateTextShadowPreview()
            elem1.text(value)
            options.hide()
        })
    })
    options.hide()
    elem1.click(function() {
        if (container.hasClass("freeze")) {
            return
        }

        $(".shadow-options").hide()
        const l = elem1.position().left - 70
        const t = elem1.position().top + 34.47

        options.css("left", l)
        options.css("top", t)
        options.show()
    })

    elem0.append(elem1)
    elem0.append(options)
    return elem0
}

function createUnitType2(unit, type, container) {
    //console.log(unit)
    //console.log(type)
    const elem1 = $("<div class='unit-selected'>" + unit + "</div>")
    const elem0 = $("<div style='display: inline-block'></div>")
    const values = ["px", "em", "rem", "vw", "vh"]
    const options = $("<div class='shadow-options' data-type='" + type + "'></div>")
    container.data("value", unit)

    values.map(function(value) {
        option = $("<div class='shadow-option' data-value='" + value + "'><span>" + value + "</span></div>")
        options.append(option)

        option.click(function() {
            const value = $(this).data("value")
            const id = $(this).parent().data("id")
            const property = $(this).parent().data("type")
            //console.log(value)
            textshadow[property] = value
            _updateTextShadowPreview()
            elem1.text(value)
            container.data("value", type)
            options.hide()
        })
    })
    options.hide()
    elem1.click(function() {
        $(".shadow-options").hide()
        const l = elem1.position().left - 70
        const t = elem1.position().top + 34.47

        options.css("left", l)
        options.css("top", t)
        options.show()
    })

    elem0.append(elem1)
    elem0.append(options)
    return elem0

}

$("#font-size-unit").append(createUnitType2("px", "fontSizeUnit", $("#font-size-unit")))
$("#letter-spacing-unit").append(createUnitType2("px", "letterSpacingUnit", $("#letter-spacing-unit")))
$("#word-spacing-unit").append(createUnitType2("px", "wordSpacingUnit", $("#word-spacing-unit")))


function createElem(id, offsetX, offsetXUnit, offsetY, offsetYUnit, blurRadius, blurRadiusUnit, color, elem) {
    //const units = ["px", "em", ]

    const selectbox1 = $("<div class='select-box'>")
    const selectbox2 = $("<div class='select-box'>")
    const selectbox3 = $("<div class='select-box'>")

    const spinner1 = $("<input type='text' class='de' value=" + offsetX + ">")
    const spinner2 = $("<input type='text' class='de' value=" + offsetY + ">")
    const spinner3 = $("<input type='text' class='de' value=" + blurRadius + ">")
    const spectrum = $("<input type='text'>")
    const hide = $("<input class='hide' type='checkbox'>")
    const remove = $("<div class='remove'></div>")
    const handle = $("<div class='handle'></div>")

    const unit1 = createUnit(offsetXUnit, "offsetXUnit", id, elem)
    const unit2 = createUnit(offsetYUnit, "offsetYUnit", id, elem)
    const unit3 = createUnit(blurRadiusUnit, "blurRadiusUnit", id, elem)

    selectbox1.append(spinner1)
    selectbox2.append(spinner2)
    selectbox3.append(spinner3)

    selectbox1.append(unit1)
    selectbox2.append(unit2)
    selectbox3.append(unit3)

    elem.append(remove)
    elem.append(hide)
    elem.append(selectbox1)
    elem.append(selectbox2)
    elem.append(selectbox3)
    elem.append(spectrum)

    elem.append(handle)

    hide.change(function() {
        if (textshadow.props[id].visible) {
            textshadow.props[id].visible = false
            spectrum.spectrum("disable")
            spectrum.spectrum("container").addClass("freeze")
            spinner1.spinner("disable")
            spinner2.spinner("disable")
            spinner3.spinner("disable")
            elem.addClass("freeze")

        } else {
            textshadow.props[id].visible = true
            spectrum.spectrum("enable")
            spinner1.spinner("enable")
            spinner2.spinner("enable")
            spinner3.spinner("enable")
            elem.removeClass("freeze")
        }
        _updateTextShadowPreview()
    })

    remove.click(function() {
        elem.remove()
        _updateContainer()
        _updateTextShadowPreview()
    })

    //console.log(offsetX)
    spinner1.spinner({
        min: -100,
        max: 100,
        spin: function(event, ui) {
            textshadow.props[id].offsetX = ui.value
            _updateTextShadowPreview()
        }
    })

    spinner2.spinner({
        min: -100,
        max: 100,
        spin: function(event, ui) {
            textshadow.props[id].offsetY = ui.value
            _updateTextShadowPreview()
        }
    })

    spinner3.spinner({
        min: 0,
        max: 100,
        spin: function(event, ui) {
            textshadow.props[id].blurRadius = ui.value
            _updateTextShadowPreview()
        }
    })

    spectrum.spectrum({
        color: "rgb(255, 37, 0)",
        preferredFormat: "rgb",
        showAlpha: true,
        showInput: true,
        showPalette: true,
        palette: [
            ["red", "rgba(0, 255, 0, .5)", "rgb(0, 0, 255)", "transparent"],
        ],
        move: function(color) {
            textshadow.props[id].color = color
            _updateTextShadowPreview()
        },
        change: function(color) {
            textshadow.props[id].color = color
            _updateTextShadowPreview()
        }
    })

    spectrum.spectrum("set", color)
}

function _importAllTextShadowsFromLocalStorage() {
    var i, l, items, presets = localStorage.getItem("textshadow-presets")

    if (!presets) {
        const textshadows = JSON.stringify(TEXTSHADOWS)
        //console.log(textshadows)
        localStorage.setItem("textshadow-presets", textshadows)
    }

    presets = localStorage.getItem("textshadow-presets")
    //console.log(presets)
    items = JSON.parse(presets)

    //console.log(TEXTSHADOWS)

    l = items.length
    for (i = 0; i < l; i++) {
        _importTextShadowFromLocalStorage(i, items[i])
    }
}

function _deleteAllTextShadowsFromLocalStorage() {
    localStorage.removeItem('textshadow-presets');
}

function _importTextShadowFromLocalStorage(index, css) {
    const element = $("<li class='load-preset' data-index='" + index + "'></li>")
    element.text(css.text)

    element.css("text-shadow", css["text-shadow"])
    element.css("color", css["color"])
    element.css("background-color", css["background-color"])
    element.css("font-size", css["font-size"])
    element.css("font-family", css["font-family"])
    element.css("letter-spacing", css["letter-spacing"])
    element.css("word-spacing", css["word-spacing"])
    element.css("font-weight", css["font-weight"])
    element.css("text-decoration", css["text-decoration"])
    element.css("font-style", css["font-style"])
    element.css("font-variant", css["font-variant"])
    element.css("text-transform", css["text-transform"])

    //console.log(css["font-family"])


    if (css["font-family"]) {
        //console.log("ok")
        css["font-family"] = css["font-family"].replace(/\"|\'/g, "")
        WebFont.load({
                google: {
                    families: [css["font-family"]]
                }
            })
            //element.css("font-family", css["font-family"])
    }

    element.css("background", css["background"])
    element.appendTo(".presets-list")
}

$("#save-preset-btn").click(function() {
    var presets = localStorage.getItem("textshadow-presets")

    const css = {
        "text": PREVIEW.text(),
        "text-shadow": _getTextShadowCSS(),
        "color": textshadow.color.toRgbString(),
        "background-color": textshadow.backgroundColor.toRgbString(),
        "font-size": textshadow.fontSize + textshadow.fontSizeUnit,
        "font-family": textshadow.fontFamily,
        "letter-spacing": textshadow.letterSpacing,
        "word-spacing": textshadow.wordSpacing,
        "font-style": textshadow.fontStyle,
        "font-variant": textshadow.fontVariant,
        "text-transform": textshadow.textTransform,
        "font-weight": textshadow.fontWeight,
        "text-decoration": textshadow.textDecoration
    }

    //console.log(css)
    if (!presets) {
        var array = []
        array.push(css)
        localStorage.setItem("textshadow-presets", JSON.stringify(array))
        presets = localStorage.getItem("textshadow-presets")
    }

    presets = JSON.parse(presets)
    presets.push(css)
    localStorage.setItem("textshadow-presets", JSON.stringify(presets))
    _importTextShadowFromLocalStorage(presets.length - 1, presets[presets.length - 1])
})

$("#delete-preset-btn").click(function() {
    var i, item, index, presets
    i = $(".actual").data("index")
    //console.log(i)
    if (i === 0 || i) {
        presets = JSON.parse(localStorage.getItem("textshadow-presets"))
        item = presets[i]

        index = presets.indexOf(item)
        if (index !== -1) {
            presets.splice(index, 1)
        }

        localStorage.setItem("textshadow-presets", JSON.stringify(presets))
        $(".presets-list").html("")
        _importAllTextShadowsFromLocalStorage()
    } else {
        alert("Please select a preset to delete")
    }
})

$("#text").click(function() {
    //console.log(TEXTSHADOWS)
    //console.log(textshadow)
    PREVIEW.css("letter-spacing", "normal")
    //console.log($("#get-font-link-dialog").dialog("instance").uiDialogTitlebar)
    $("#get-font-link-dialog").dialog("instance").uiDialogTitlebar.css("background-color", "#fff")
    $("#get-font-link-dialog").dialog("instance").uiDialogTitlebar.css("borderte-color", "#fff")

    WebFont.load({
        google: {
            families: ["Allerta Stencil"]
        }
    })
})

$(".shadows__container").sortable({
    hadle: ".handle",
    update: function() {
        _updateContainer()
        _updateTextShadowPreview()
    }
})

$("#add-shadow-accept").click(function() {
    $("#test").attr("style", $("#add-shadow__input").val())
    const id = textshadow.props.length - 1
    const formattedValue = $("#test").css("text-shadow")
    const parsedValue = _parseCSSInput(formattedValue, id)
    //console.log(parsedValue)
    textshadow.props = textshadow.props.concat(parsedValue)
    //console.log(textshadow.props)
    _updateContainer()
    _updateTextShadowPreview()
    $("#add-shadow").hide()
    $("#add-shadow__input").val("")
})

$("#normal-fonts").change(function() {
    PREVIEW.css("font-family", $(this).val())
})

async function _getFontsList() {

    const data = await fetch("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyDb0csgP8OEZ7qY-qhGPDAiJ382ydg239A")
        .then(function(response) {
            return response.json()
        })
        .then(function(data) {
            return data
        })

    ////console.log(data)

    const items = data.items
    const select = $("#google-fonts")

    items.map(function(item) {
        const elem = $("<option>" + item.family + "</option>")
        select.append(elem)
    })
}

$("#google-fonts").change(function() {
    let fontFamily
    const value = $(this).val()
    //console.log(value)
    WebFont.load({
        google: {
            families: [value]
        }
    })


    if (value.match(/\s/)) {
        if (!value.startsWith("'")) {
            fontFamily = "'" + value + "'"
        } else {
            fontFamily = value
        }
    } else {
        fontFamily = value
    }
    textshadow.fontFamily = fontFamily
    _updateTextShadowPreview()
})

function _firstload() {
    const { color, backgroundColor, fontFamily, fontSize, letterSpacing, letterSpacingUnit, wordSpacing, wordSpacingUnit, fontWeight } = textshadow

    $("#textColor").spectrum("set", color.toRgbString())
    $("#backgroundColor").spectrum("set", backgroundColor.toRgbString())

    const selected = fontFamily.replace(/\"|\'/g, "")
    //console.log(selected)
    $("#google-fonts").val(selected)

    $("#font-size").val(fontSize)
    $("#font-size-slider").slider("value", fontSize)

    if (letterSpacing === "normal") {
        $("#letter-spacing-normal").prop("checked", true)
    } else {
        $("#letter-spacing").val(letterSpacing)
        $("#letter-spacing-slider").slider("value", letterSpacing)
        $("#letter-spacing-unit .unit-selected").text(letterSpacingUnit)
        $("#letter-spacing-normal").prop("checked", false)
    }

    if (wordSpacing === "normal") {
        $("#word-spacing-normal").prop("checked", true)
    } else {
        $("#word-spacing").val(wordSpacing)
        $("#word-spacing-unit .unit-selected").text(wordSpacingUnit)
        $("#word-spacing-slider").slider("value", wordSpacing)
        $("#word-spacing-normal").prop("checked", false)
    }

    $("#font-weight").val(fontWeight)
    $("#font-weight-slider").slider("value", fontWeight)

    $(".setting__value[data-property='fontWeight']").removeClass("setting__value--active")
    $(".setting__value[data-property='textDecoration']").removeClass("setting__value--active")
    $(".setting__value[data-property='fontStyle']").removeClass("setting__value--active")
    $(".setting__value[data-property='fontVariant']").removeClass("setting__value--active")
    $(".setting__value[data-property='textTransform']").removeClass("setting__value--active")


    $(".setting__value[data-property='fontWeight'][data-value='" + textshadow.fontWeight + "']").addClass("setting__value--active")
    $(".setting__value[data-property='textDecoration'][data-value='" + textshadow.textDecoration + "']").addClass("setting__value--active")
    $(".setting__value[data-property='fontStyle'][data-value='" + textshadow.fontStyle + "']").addClass("setting__value--active")
    $(".setting__value[data-property='fontVariant'][data-value='" + textshadow.fontVariant + "']").addClass("setting__value--active")
    $(".setting__value[data-property='textTransform'][data-value='" + textshadow.textTransform + "']").addClass("setting__value--active")
}

$("#add-shadow").hide()

function _loadTextShadow(elementHTML, format) {
    var style, order, value = {}
    value.a = elementHTML.css("text-shadow")
    value.b = elementHTML.css("color")
    value.c = elementHTML.css("background-color")
    value.d = elementHTML.css("font-size")
    value.e = elementHTML.css("letter-spacing")
    value.f = elementHTML.css("word-spacing")
    value.g = elementHTML.css("font-family")
    value.h = elementHTML.css("font-weight")
    value.i = elementHTML.css("text-decoration-line")
    value.j = elementHTML.css("font-style")
    value.k = elementHTML.css("font-variant")
    value.l = elementHTML.css("text-transform")
    //console.log(value.g)

    let fontSizeUnit, letterSpacingUnit, wordSpacingUFamily

    //console.log(value.d)
    if (fontSizeUnit = value.d.match(/px|em|rem|vw|vh/)) {
        fontSizeUnit = fontSizeUnit[0]
    }
    value.d = parseFloat(value.d)
    //console.log(fontSizeUnit)

    if (value.e !== "normal") {
        //console.log(value.e)
        if (letterSpacingUnit = value.e.match(/(px|em|rem|vw|vh)/g)) {
            letterSpacingUnit = letterSpacingUnit[0]
            //console.log(letterSpacingUnit)
        }
        //letterSpacingUnit = letterSpacingUnit[0]
        //console.log(letterSpacingUnit)
        value.e = parseFloat(value.e)
    }

    if (value.f !== "normal") {
        //console.log(value.f)
        if (wordSpacingUnit = value.f.match(/(px|em|rem|vw|vh)/)) {
            wordSpacingUnit = wordSpacingUnit[0]
        }
        value.f = parseFloat(value.f)
    }

    if (value.h === "normal") {
        value.h = 400
    } else if (value.h === "bold") {
        value.h = 700
    }

    //console.log(value.a)
    //console.log(value.b)
    //console.log(value.c)
    //console.log(value.d)
    //console.log(value.e)
    //console.log(value.f)
    //console.log(value.g)
    //console.log(value.h)
    //console.log(value.i)
    //console.log(value.j)
    //console.log(value.k)
    //console.log(value.l)

    const parsedValue = _parseCSSInput(value.a, -1)

    return new TEXTSHADOWCSS({
        "textShadow": parsedValue,
        "color": tinycolor(value.b),
        "backgroundColor": tinycolor(value.c),
        "fontSize": value.d,
        "fontSizeUnit": fontSizeUnit,
        "letterSpacing": value.e,
        "letterSpacingUnit": letterSpacingUnit,
        "wordSpacing": value.f,
        "wordSpacingUnit": wordSpacingUnit,
        "fontFamily": value.g,
        "fontWeight": value.h,
        "textDecoration": value.i,
        "fontStyle": value.j,
        "fontVariant": value.k,
        "textTransform": value.l
    })
}

let textshadow = _loadTextShadow($(".current"))
_updateContainer()
_updateTextShadowPreview()


$("#add-shadow-btn").click(function() {
    $("#add-shadow").show()
})

$(".setting__value").click(function(e) {
    const $this = $(this)
    const property = $this.data("property")
    const value = $this.data("value")

    if (value) {
        textshadow[property] = value
    }
    _updateTextShadowPreview()

    $(".setting__value[data-property='" + property + "']").removeClass("setting__value--active")
    $this.addClass("setting__value--active")
})

$("#backgroundColor").spectrum({
    color: "rgb(255, 37, 0)",
    preferredFormat: "rgb",
    showAlpha: true,
    showInput: true,
    showPalette: true,
    palette: [
        ["red", "rgba(0, 255, 0, .5)", "rgb(0, 0, 255)", "transparent"],
    ],
    move: function(color) {
        textshadow.backgroundColor = color
        _updateTextShadowPreview()
    },
    change: function(color) {
        textshadow.backgroundColor = color
        _updateTextShadowPreview()
    }
})

$("#textColor").spectrum({
    color: "rgb(255, 37, 0)",
    preferredFormat: "rgb",
    showAlpha: true,
    showInput: true,
    showPalette: true,
    palette: [
        ["red", "rgba(0, 255, 0, .5)", "rgb(0, 0, 255)", "transparent"],
    ],
    move: function(color) {
        textshadow.color = color
        _updateTextShadowPreview()
    },
    change: function(color) {
        textshadow.color = color
        _updateTextShadowPreview()
    }
})

$("#font-weight-slider").slider({
    step: 100,
    min: 100,
    max: 900,
    slide: function(event, ui) {
        const value = ui.value
        textshadow.fontWeight = value
        _updateTextShadowPreview()
        $("#font-weight").val(value)
    }
})

$("#font-weight").spinner({
    step: 100,
    min: 100,
    max: 900,
    spin: function(event, ui) {
        const value = ui.value
        textshadow.fontWeight = value
        _updateTextShadowPreview()
        $("#font-weight-slider").slider("value", value)
    }
})

$("#font-size-slider").slider({
    min: 2,
    max: 200,
    step: 1,
    slide: function(event, ui) {
        const value = ui.value
        textshadow.fontSize = value
        _updateTextShadowPreview()
        $("#font-size").val(value)
    }
})

$("#font-size").spinner({
    min: 2,
    max: 200,
    step: 1,
    spin: function(event, ui) {
        const value = ui.value
        textshadow.fontSize = value
        _updateTextShadowPreview()
        $("#font-size-slider").slider("value", value)
    }
})

$("#font-size").keyup(function() {
    const value = $(this).val()
    textshadow.fontSize = value
    _updateTextShadowPreview()
    $("#font-size-slider").slider("value", value)
})

LETTER_SPACING.keyup(function() {
    const value = $(this).val()
    textshadow.letterSpacing = value
    textshadow.letterSpacingUnit = LETTER_SPACING_UNIT.data("value")
    _updateTextShadowPreview()
    LETTER_SPACING_SLIDER.slider("value", value)
})

WORD_SPACING.keyup(function() {
    const value = $(this).val()
    textshadow.wordSpacing = value
    textshadow.wordSpacingUnit = WORD_SPACING_UNIT.data("value")
    _updateTextShadowPreview()
    WORD_SPACING_SLIDER.slider("value", value)
})

LETTER_SPACING.spinner({
    min: 0,
    max: 100,
    step: 1,
    value: 0,
    spin: function(event, ui) {
        const value = ui.value
        textshadow.letterSpacing = value
        textshadow.letterSpacingUnit = LETTER_SPACING_UNIT.data("value")
        _updateTextShadowPreview()
        LETTER_SPACING_SLIDER.slider("value", value)
        $("#letter-spacing-normal").prop("checked", false)
    }
})

LETTER_SPACING_SLIDER.slider({
    min: 0,
    max: 100,
    step: 1,
    value: 0,
    slide: function(event, ui) {
        const value = ui.value
        textshadow.letterSpacing = value
        textshadow.letterSpacingUnit = LETTER_SPACING_UNIT.data("value")
        _updateTextShadowPreview()
        LETTER_SPACING.val(value)
        $("#letter-spacing-normal").prop("checked", false)
    }
})

$("#letter-spacing-normal").change(function() {
    //console.log("change")
    if ($(this).is(":checked")) {
        textshadow.letterSpacing = "normal"
        textshadow.letterSpacingUnit = ""
    } else {
        //console.log($("#letter-spacing").val())
        textshadow.letterSpacing = parseFloat($("#letter-spacing").val())
        //console.log($("#letter-spacing-unit").data("value"))
        textshadow.letterSpacingUnit = $("#letter-spacing-unit").data("value")
    }
    _updateTextShadowPreview()
})

WORD_SPACING.spinner({
    step: 1,
    min: 0,
    max: 100,
    value: 0,
    spin: function(event, ui) {
        const value = ui.value
        textshadow.wordSpacing = value
        textshadow.wordSpacingUnit = WORD_SPACING_UNIT.data("value")
        _updateTextShadowPreview()
        WORD_SPACING_SLIDER.slider("value", value)
        $("#word-spacing-normal").prop("checked", false)
    }
})

WORD_SPACING_SLIDER.slider({
    step: 1,
    min: 0,
    max: 100,
    slide: function(event, ui) {
        const value = ui.value
        textshadow.wordSpacing = value
        textshadow.wordSpacingUnit = WORD_SPACING_UNIT.data("value")
        _updateTextShadowPreview()
        WORD_SPACING.val(value)
        $("#word-spacing-normal").prop("checked", false)
    }
})

$("#word-spacing-normal").change(function() {
    if ($(this).is(":checked")) {
        textshadow.wordSpacing = "normal"
        textshadow.wordSpacingUnit = ""
    } else {
        textshadow.wordSpacing = parseFloat($("#word-spacing").val())
        textshadow.wordSpacingUnit = WORD_SPACING_UNIT.data("value")
    }
    _updateTextShadowPreview()
})

$("#import-css-dialog").dialog({
    width: 800,
    autoOpen: false,
    title: "Import From CSS"
})

$("#get-css-dialog").dialog({
    width: 800,
    autoOpen: false,
    title: "CSS"
})

$("#get-font-link-dialog").dialog({
    width: 800,
    autoOpen: false,
})

$("#tabs").tabs()

$("#get-css-btn").click(function() {
    //$("#get-css-dialog").dialog("open")
    $("#get-font-link-dialog").dialog("open")
})

$("#import-css-btn").click(function() {
    $("#import-css-dialog").dialog("open")
})

$("#import-css-btn-ok").click(function() {
    $("#test").attr("style", $("#import-css-area").val())
    const testValue = $("#test").css("text-shadow")

    $(".shadows__container").html("")

    const parsedValue = _parseCSSInput(testValue, -1)
    textshadow = _loadTextShadow($("#test"))
    _updateContainer()
    _updateTextShadowPreview()
    _firstload()
    $("#import-css-area").val("")
    $("#import-css-dialog").dialog("close")
})

$("#add-shadow-cancel").click(function() {
    $("#add-shadow").hide()
})

$(".panel__toggle").click(function() {
    const $this = $(this),
        p = $this.parent().next()
    if (($this).hasClass("toggle-on")) {
        $this.removeClass("toggle-on")
        $this.addClass("toggle-off")
        p.hide()
    } else {
        $this.removeClass("toggle-off")
        $this.addClass("toggle-on")
        p.show()
    }
})

new ClipboardJS("#get-copy-css")
new ClipboardJS("#copy-font-link")
_firstload()
_deleteAllTextShadowsFromLocalStorage()
_importAllTextShadowsFromLocalStorage()
_getFontsList()

$(".presets-list").on("click", ".load-preset", function() {
    $(".shadows__container").html("")
    $(".load-preset").removeClass("actual")
    $(this).addClass("actual")

    textshadow = _loadTextShadow($(this), textshadow.format)
    _updateContainer()
    _updateTextShadowPreview()
    _firstload()
        //$(".add-gradient").hide()
        //$(".adjust-color").hide()
})

function _updateContainer() {
    const order = $(".shadows__container").sortable("toArray")
    //console.log(order)
    textshadow.order = order
}

$("#color-format").selectmenu({
    change: function() {
        textshadow.format = $(this).val()
        _updateTextShadowPreview()
            // $("#get-css-dialog").dialog("open")
    }
})