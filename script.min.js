const PREVIEW = $("#textShadowPreview")

function TEXTSHADOWCSS(options) {
    this.color = options["color"] || tinycolor("white")
    this.backgroundColor = options["backgroundColor"] || tinycolor("black")
    this.fontSize = 100
    this.fontFamily = options["fontFamily"] || "sans-serif"
    this.letterSpacing = options["letterSpacing"] || "normal"
    this.wordSpacing = options["wordSpacing"] || "normal"
    this.props = options["textShadow"]
    this.order = ["0"]
    this.fontWeight = options["fontWeight"] || "normal"
    this.textDecoration = options["textDecoration"] || "none"
    this.fontStyle = options["fontStyle"] || "normal"
    this.fontVariant = options["fontVariant"] || "normal"
    this.textTransform = options["textTransform"] || "none"
    this.format = "rgba"
}

function _updateTextShadowPreview() {
    const { color, backgroundColor, fontSize, fontFamily, letterSpacing, wordSpacing, fontWeight, textDecoration, fontStyle, fontVariant, textTransform } = textshadow
    const textShadow = _getTextShadowCSS()

    PREVIEW.css("text-shadow", textShadow)
    PREVIEW.css("color", color.toRgbString())
    PREVIEW.css("background-color", backgroundColor.toRgbString())
    PREVIEW.css("font-size", fontSize)
    PREVIEW.css("font-family", fontFamily)
    PREVIEW.css("letter-spacing", letterSpacing)
    PREVIEW.css("word-spacing", wordSpacing)
    PREVIEW.css("font-weight", fontWeight)
    PREVIEW.css("text-decoration", textDecoration)
    PREVIEW.css("font-style", fontStyle)
    PREVIEW.css("font-variant", fontVariant)
    PREVIEW.css("text-transform", textTransform)

    let html = ""

    if (letterSpacing !== "normal") {
        html += "<div><b>letter-spacing: </b>" + letterSpacing + ";</div>"
    }

    if (wordSpacing !== "normal") {
        html += "<div><b>word-spacing: </b>" + wordSpacing + ";</div>"
    }

    if (fontWeight !== "normal") {
        html += "<div><b>font-weight: </b>" + fontWeight + ";</div>"
    }

    if (textDecoration !== "none") {
        html += "<div><b>text-decoration: </b>" + textDecoration + ";</div>"
    }

    if (fontVariant !== "normal") {
        html += "<div><b>font-variant: </b>" + fontVariant + ";</div>"
    }

    if (textTransform !== "none") {
        html += "<div><b>text-transform: </b>" + textTransform + ";</div>"
    }

    html += "<div><b>color: </b>" + color + ";</div>"
    html += "<div><b>background-color: </b>" + backgroundColor + ";</div>"
    html += "<div><b>text-shadow: </b>" + textShadow + ";</div>"

    $("#show-code").html(html)
}

function _getTextShadowCSS() {
    console.log(textshadow.props)
    let textShadow = textshadow.props.filter((prop) => prop.visible)
    console.log(textShadow)
    textShadow = textshadow.order.map((index) => {
        const prop = textshadow.props[index]
        const css = prop.offsetX + prop.offsetXUnit + " " + prop.offsetY + prop.offsetYUnit + " " + prop.blurRadius + prop.blurRadiusUnit + " " + prop.color.toRgbString()
        return css
    }).join(", ")

    if (CSS.supports("text-shadow", textShadow)) {
        console.log("ok")
    }

    return textShadow
}

function _parseCSSInput(value, start) {
    value = value.replace(/\s+/g, "")
    value = value.replace("text-shadow:", "")
    value = value.replace(";", "")
    console.log(value)

    let results = [...value.matchAll(/(#(?:[\da-fA-F]{3}){1,2}|(?:rgb|hsl)a\((?:\d{1,3}%?,\s?){3}(?:1|0?\.\d+)\)|(?:rgb|hsl)\(\d{1,3}%?(?:,\s?\d{1,3}%?){2}\))(((-?\d{1,3})(px|em))((-?\d{1,3})(px|em))((-?\d{1,3})(px|em))?)/g)]
    console.log(results)
    const array = []

    for (var i = 0; i < results.length; i++) {
        start = start + 1 //expect error to be occured in cssgradienteditor//not solved

        const res = {}
        const result = results[i]
        const elem = $("<li class='shadow' id='" + start + "'></li>")

        res.color = tinycolor(result[1])
        res.offsetX = parseFloat(result[4])
        res.offsetXUnit = result[5]
        res.offsetY = parseFloat(result[7])
        res.offsetYUnit = result[8]
        res.blurRadius = parseFloat(result[10])
        res.blurRadiusUnit = result[11]
        res.visible = true
        array.push(res)
        createElem(start, res.offsetX, res.offsetXUnit, res.offsetY, res.offsetYUnit, res.blurRadius, res.blurRadiusUnit, res.color, elem)
        $(".shadows__container").append(elem)
        console.log(elem)
    }
    return array
}

function createUnit(unit, type, id) {
    const elem1 = $("<div class='bg-selected'>" + unit + "</div>")
    const elem0 = $("<div style='display: inline-block;'></div>")
    const values = ["px", "em", "rem", "vw", "vh"]
    const options = $("<div class='shadow-options' data-id='" + id + "' data-type='" + type + "'></div>");

    values.map((value) => {
        option = $("<div class='shadow-option' data-value='" + value + "'><span>" + value + "</span></div>");
        options.append(option)

        option.click(function() {
            const value = $(this).data("value")
            const id = $(this).parent().data("id")
            const property = $(this).parent().data("type")
            console.log(value)
            textshadow.props[id][property] = value
            _updateTextShadowPreview()
            elem1.text(value)
        })
    })
    options.hide();
    elem1.click(() => {
        $(".shadow-options").hide()
        const l = elem1.position().left - 70
        const t = elem1.position().top + 34.47

        options.css("left", l)
        options.css("top", t)
        options.show()
    })

    elem0.append(elem1)
    elem0.append(options)
    return elem0
}

function createElem(id, offsetX, offsetXUnit, offsetY, offsetYUnit, blurRadius, blurRadiusUnit, color, elem) {
    const units = ["px", "em", ]
    const selectbox1 = $("<div class='select-box'>")
    const selectbox2 = $("<div class='select-box'>")
    const selectbox3 = $("<div class='select-box'>")

    const spinner1 = $("<input type='text' class='de' value=" + offsetX + ">")
    const spinner2 = $("<input type='text' class='de' value=" + offsetY + ">")
    const spinner3 = $("<input type='text' class='de' value=" + blurRadius + ">")
    const spectrum = $("<input type='text'>")
    const hide = $("<input class='hide' type='checkbox'>")
    const remove = $("<div class='remove'></div>")
    const handle = $("<div class='handle'></div>")

    const unit1 = createUnit(offsetXUnit, "offsetXUnit", id)
    const unit2 = createUnit(offsetYUnit, "offsetYUnit", id)
    const unit3 = createUnit(blurRadiusUnit, "blurRadiusUnit", id)

    selectbox1.append(spinner1)
    selectbox2.append(spinner2)
    selectbox3.append(spinner3)

    selectbox1.append(unit1)
    selectbox2.append(unit2)
    selectbox3.append(unit3)

    elem.append(remove)
    elem.append(selectbox1)
    elem.append(selectbox2)
    elem.append(selectbox3)
    elem.append(spectrum)
    elem.append(hide)

    elem.append(handle)

    hide.change(() => {
        if (textshadow.props[id].visible) {
            textshadow.props[id].visible = false
        } else {
            textshadow.props[id].visible = true
        }
        _updateTextShadowPreview()
    })

    remove.click(function() {
        elem.remove()
        _updateContainer()
        _updateTextShadowPreview()
    })

    console.log(offsetX)
    spinner1.spinner({
        min: 0,
        max: 100,
        spin: function(event, ui) {
            textshadow.props[id].offsetX = ui.value
            _updateTextShadowPreview()
        }
    })

    spinner2.spinner({
        min: 0,
        max: 100,
        spin: function(event, ui) {
            textshadow.props[id].offsetY = ui.value
            _updateTextShadowPreview()
        }
    })

    spinner3.spinner({
        min: 0,
        max: 100,
        spin: function(event, ui) {
            textshadow.props[id].blurRadius = ui.value
            _updateTextShadowPreview()
        }
    })

    spectrum.spectrum({
        color: "rgb(255, 37, 0)",
        preferredFormat: "rgb",
        showAlpha: true,
        showInput: true,
        showPalette: true,
        palette: [
            ["red", "rgba(0, 255, 0, .5)", "rgb(0, 0, 255)", "transparent"],
        ],
        move: function(color) {
            textshadow.props[id].color = color
            _updateTextShadowPreview()
        },
        change: function(color) {
            textshadow.props[id].color = color
            _updateTextShadowPreview()
        }
    })

    spectrum.spectrum("set", color)
}

function _importAllTextShadowsFromLocalStorage() {
    var i, l, items, presets = localStorage.getItem("textshadow-presets");

    if (!presets) {
        const textshadows = JSON.stringify(TEXTSHADOWS);
        console.log(textshadows)
        localStorage.setItem("textshadow-presets", textshadows);
    }

    presets = localStorage.getItem("textshadow-presets");
    console.log(presets)
    items = JSON.parse(presets);

    console.log(TEXTSHADOWS)

    l = items.length;
    for (i = 0; i < l; i++) {
        _importTextShadowFromLocalStorage(i, items[i]);
    }
}

function _importTextShadowFromLocalStorage(index, css) {
    const element = $("<li class='load-preset' data-index='" + index + "'></li>");
    element.text(css.text)
    element.css("text-shadow", css["text-shadow"])
    element.css("color", css["color"])
    element.css("background-color", css["background-color"])
    element.css("font-size", css["font-size"])
    element.css("font-family", css["font-family"])
    console.log(css["font-family"])

    if (css["font-family"]) {
        WebFont.load({
                google: {
                    families: css["font-family"]
                }
            })
            //element.css("font-family", css["font-family"])
    }

    element.css("background", css["background"])
    element.appendTo(".presets-list");
}

$("#save-preset-btn").click(function() {
    var presets = localStorage.getItem("textshadow-presets");

    const css = {
        "text": "Preview",
        "text-shadow": _getTextShadowCSS(),
        "color": textshadow.color.toRgbString(),
        "background-color": textshadow.backgroundColor.toRgbString(),
        "font-size": textshadow.fontSize,
        "font-family": textshadow.fontFamily
    }
    console.log(css)
    if (!presets) {
        var array = [];
        array.push(css);
        localStorage.setItem("textshadow-presets", JSON.stringify(array));
        presets = localStorage.getItem("textshadow-presets");
    }

    presets = JSON.parse(presets);
    presets.push(css);
    localStorage.setItem("textshadow-presets", JSON.stringify(presets));
    _importTextShadowFromLocalStorage(presets.length - 1, presets[presets.length - 1]);
})

$("#delete-preset-btn").click(function() {
    var i, item, index, presets;
    i = $(".actual").data("index");
    console.log(i);
    if (i === 0 || i) {
        presets = JSON.parse(localStorage.getItem("textshadow-presets"));
        item = presets[i];

        index = presets.indexOf(item);
        if (index !== -1) {
            presets.splice(index, 1);
        }

        localStorage.setItem("textshadow-presets", JSON.stringify(presets));
        $(".presets-list").html("");
        _importAllTextShadowsFromLocalStorage();
    } else {
        alert("Please select a preset to delete");
    }
})

$("#text").click(function() {
    console.log(TEXTSHADOWS)
    console.log(textshadow)
})

$(".shadows__container").sortable({
    hadle: ".handle",
    update: function() {
        _updateContainer()
        _updateTextShadowPreview()
    }
})

$("#add-shadow-accept").click(function() {
    $("#test").attr("style", $("#add-shadow__input").val())
    const id = textshadow.props.length - 1
    const formattedValue = $("#test").css("text-shadow")
    const parsedValue = _parseCSSInput(formattedValue, id)
    console.log(parsedValue)
    textshadow.props = textshadow.props.concat(parsedValue)
    console.log(textshadow.props)
    _updateContainer()
    _updateTextShadowPreview()
})

const getFontsList = async() => {
    const data = await fetch("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyDb0csgP8OEZ7qY-qhGPDAiJ382ydg239A")
        .then(response => response.json())
        .then(data => {
            return data
        });

    //console.log(data)
    const items = data.items
    const select = $("#google-fonts")
    items.map((item) => {
        //console.log(item.family)
        const elem = $("<option>" + item.family + "</option>")
        select.append(elem)
    })
}
getFontsList()

$("#google-fonts").change(function() {
    const value = $(this).val()
    console.log(value)
    WebFont.load({
        google: {
            families: [value]
        }
    })
    textshadow.fontFamily = value
    _updateTextShadowPreview()
})

function _firstload() {
    $("#textColor").spectrum("set", textshadow.color.toRgbString())
    $("#backgroundColor").spectrum("set", textshadow.backgroundColor.toRgbString())
    $("#font-size").slider("value", textshadow.fontSize)
    $("#letter-spacing").slider("value", textshadow.letterSpacing)
    $("#word-spacing").slider("value", textshadow.wordSpacing)
    $(".setting__value[data-property='fontWeight'][data-value='" + textshadow.fontWeight + "']").addClass("setting__value--active")
    $(".setting__value[data-property='textDecoration'][data-value='" + textshadow.textDecoration + "']").addClass("setting__value--active")
    $(".setting__value[data-property='fontStyle'][data-value='" + textshadow.fontStyle + "']").addClass("setting__value--active")
    $(".setting__value[data-property='fontVariant'][data-value='" + textshadow.fontVariant + "']").addClass("setting__value--active")
    $(".setting__value[data-property='textTransform'][data-value='" + textshadow.textTransform + "']").addClass("setting__value--active")
}

$("#add-shadow").hide()

function _loadTextShadow(elementHTML, format) {
    var style, order, value = {};
    value.a = elementHTML.css("text-shadow");
    value.b = elementHTML.css("color")
    value.c = elementHTML.css("background-color")
    value.d = elementHTML.css("font-size")
    value.e = elementHTML.css("letter-spacing")
    value.f = elementHTML.css("word-spacing")
    value.g = elementHTML.css("font-family")
    value.h = elementHTML.css("font-weight")
    value.i = elementHTML.css("text-decoration")
    value.j = elementHTML.css("font-style")
    value.k = elementHTML.css("font-variant")
    value.l = elementHTML.css("text-transform")

    console.log(value.a)
    console.log(value.b)
    console.log(value.c)
    console.log(value.d)
    console.log(value.e)
    console.log(value.f)
    console.log(value.g)
    console.log(value.h)
    console.log(value.i)
    console.log(value.j)
    console.log(value.k)
    console.log(value.l)

    const parsedValue = _parseCSSInput(value.a, -1)

    return new TEXTSHADOWCSS({
        "textShadow": parsedValue,
        "color": tinycolor(value.b),
        "backgroundColor": tinycolor(value.c),
        "fontSize": value.d,
        "letterSpacing": value.e,
        "wordSpacing": value.f,
        "fontFamily": value.g,
        "fontWeight": value.h,
        "textDecoration": value.i,
        "fontStyle": value.j,
        "fontVariant": value.k,
        "textTransform": value.l
    })
}

let textshadow = _loadTextShadow($(".current"))
_updateContainer()
_updateTextShadowPreview()


$("#add-shadow-btn").click(function() {
    $("#add-shadow").show()
})

$(".setting__value").click(function(e) {
    const $this = $(this);
    const property = $this.data("property");
    const value = $this.data("value");

    if (value) {
        textshadow[property] = value;
    }
    _updateTextShadowPreview()

    $(".setting__value[data-property='" + property + "']").removeClass("setting__value--active");
    $this.addClass("setting__value--active");
});

$("#backgroundColor").spectrum({
    color: "rgb(255, 37, 0)",
    preferredFormat: "rgb",
    showAlpha: true,
    showInput: true,
    showPalette: true,
    palette: [
        ["red", "rgba(0, 255, 0, .5)", "rgb(0, 0, 255)", "transparent"],
    ],
    move: function(color) {
        textshadow.backgroundColor = color
        _updateTextShadowPreview()
    },
    change: function(color) {
        textshadow.backgroundColor = color
        _updateTextShadowPreview()
    }
})

$("#textColor").spectrum({
    color: "rgb(255, 37, 0)",
    preferredFormat: "rgb",
    showAlpha: true,
    showInput: true,
    showPalette: true,
    palette: [
        ["red", "rgba(0, 255, 0, .5)", "rgb(0, 0, 255)", "transparent"],
    ],
    move: function(color) {
        textshadow.color = color
        _updateTextShadowPreview()
    },
    change: function(color) {
        textshadow.color = color
        _updateTextShadowPreview()
    }
})

$("#font-size").slider({
    min: 2,
    max: 200,
    slide: function(event, ui) {
        textshadow.fontSize = ui.value
        _updateTextShadowPreview()
    }
})

$("#letter-spacing").slider({
    min: 0,
    max: 10,
    slide: function(event, ui) {
        textshadow.letterSpacing = ui.value
        _updateTextShadowPreview()
    }
})

$("#word-spacing").slider({
    min: 0,
    max: 10,
    slide: function(event, ui) {
        textshadow.wordSpacing = ui.value
        _updateTextShadowPreview()
    }
})

$("#import-css-dialog").dialog({
    width: 800,
    autoOpen: false,
    title: "Import From CSS"
})

$("#get-css-dialog").dialog({
    width: 800,
    autoOpen: false,
    title: "CSS"
})

$("#get-css-btn").click(function() {
    $("#get-css-dialog").dialog("open")
})

$("#import-css-btn").click(function() {
    $("#import-css-dialog").dialog("open")
})

$("#import-css-btn-ok").click(function() {
    $("#test").attr("style", $("#import-css-area").val())
    const testValue = $("#test").css("text-shadow")

    $(".shadows__container").html("")

    const parsedValue = _parseCSSInput(testValue, -1)
    textshadow = _loadTextShadow($("#test"))
    _updateContainer()
    _updateTextShadowPreview()
})

$("#add-shadow-accept").click(function() {

})

$("#add-shadow-cancel").click(function() {

})

$(".panel__toggle").click(function() {
    const $this = $(this),
        p = $this.parent().next()
    if (($this).hasClass("toggle-on")) {
        $this.removeClass("toggle-on")
        $this.addClass("toggle-off")
        p.hide()
    } else {
        $this.removeClass("toggle-off")
        $this.addClass("toggle-on")
        p.show()
    }
})

new ClipboardJS("#get-copy-css")
_firstload()
_importAllTextShadowsFromLocalStorage()

$(".presets-list").on("click", ".load-preset", function() {
    $(".shadows__container").html("")
    $(".load-preset").removeClass("actual");
    $(this).addClass("actual");

    textshadow = _loadTextShadow($(this), gradient.format)
    _updateContainer()
    _updateTextShadowPreview()
        //$(".add-gradient").hide();
        //$(".adjust-color").hide();
})

function _updateContainer() {
    const order = $(".shadows__container").sortable("toArray")
    console.log(order)
    textshadow.order = order
}

$("#color-format").selectmenu({
    change: function() {
        textshadow.format = gradient.changeFormatColor($(this).val());
        _updateTextShadowPreview()
        $("#get-css-dialog").dialog("open");
    }
})

function _changeFormat() {

}